
/*
 * Generated file. Do not edit.
 *
 * Locales: 2
 * Strings: 42 (21.0 per locale)
 */

import 'package:flutter/widgets.dart';

const AppLocale _baseLocale = AppLocale.en;
AppLocale _currLocale = _baseLocale;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.en) // set locale
/// - Locale locale = AppLocale.en.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.en) // locale check
enum AppLocale {
	en, // 'en' (base locale, fallback)
	de, // 'de'
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of t).
///
/// Usage:
/// String a = t.someKey.anotherKey;
/// String b = t['someKey.anotherKey']; // Only for edge cases!
_TranslationsEn _t = _currLocale.translations;
_TranslationsEn get t => _t;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final t = Translations.of(context); // Get t variable.
/// String a = t.someKey.anotherKey; // Use t variable.
/// String b = t['someKey.anotherKey']; // Only for edge cases!
class Translations {
	Translations._(); // no constructor

	static _TranslationsEn of(BuildContext context) {
		final inheritedWidget = context.dependOnInheritedWidgetOfExactType<_InheritedLocaleData>();
		if (inheritedWidget == null) {
			throw 'Please wrap your app with "TranslationProvider".';
		}
		return inheritedWidget.translations;
	}
}

class LocaleSettings {
	LocaleSettings._(); // no constructor

	/// Uses locale of the device, fallbacks to base locale.
	/// Returns the locale which has been set.
	static AppLocale useDeviceLocale() {
		final locale = AppLocaleUtils.findDeviceLocale();
		return setLocale(locale);
	}

	/// Sets locale
	/// Returns the locale which has been set.
	static AppLocale setLocale(AppLocale locale) {
		_currLocale = locale;
		_t = _currLocale.translations;

		if (WidgetsBinding.instance != null) {
			// force rebuild if TranslationProvider is used
			_translationProviderKey.currentState?.setLocale(_currLocale);
		}

		return _currLocale;
	}

	/// Sets locale using string tag (e.g. en_US, de-DE, fr)
	/// Fallbacks to base locale.
	/// Returns the locale which has been set.
	static AppLocale setLocaleRaw(String rawLocale) {
		final locale = AppLocaleUtils.parse(rawLocale);
		return setLocale(locale);
	}

	/// Gets current locale.
	static AppLocale get currentLocale {
		return _currLocale;
	}

	/// Gets base locale.
	static AppLocale get baseLocale {
		return _baseLocale;
	}

	/// Gets supported locales in string format.
	static List<String> get supportedLocalesRaw {
		return AppLocale.values
			.map((locale) => locale.languageTag)
			.toList();
	}

	/// Gets supported locales (as Locale objects) with base locale sorted first.
	static List<Locale> get supportedLocales {
		return AppLocale.values
			.map((locale) => locale.flutterLocale)
			.toList();
	}

	/// Sets plural resolvers.
	/// See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/language_plural_rules.html
	/// See https://github.com/Tienisto/flutter-fast-i18n/blob/master/lib/src/model/pluralization_resolvers.dart
	/// Either specify [language], or [locale]. Locale has precedence.
	/// Rendered Resolvers: ['en', 'de']
	static void setPluralResolver({String? language, AppLocale? locale, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) {
		final List<AppLocale> locales;
		if (locale != null) {
			locales = [locale];
		} else {
			switch (language) {
				case 'en':
					locales = [AppLocale.en];
					break;
				case 'de':
					locales = [AppLocale.de];
					break;
				default:
					locales = [];
			}
		}
		locales.forEach((curr) {
			switch(curr) {
				case AppLocale.en:
					_translationsEn = _TranslationsEn.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
					break;
				case AppLocale.de:
					_translationsDe = _TranslationsDe.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
					break;
			}
		});
	}
}

/// Provides utility functions without any side effects.
class AppLocaleUtils {
	AppLocaleUtils._(); // no constructor

	/// Returns the locale of the device as the enum type.
	/// Fallbacks to base locale.
	static AppLocale findDeviceLocale() {
		final String? deviceLocale = WidgetsBinding.instance?.window.locale.toLanguageTag();
		if (deviceLocale != null) {
			final typedLocale = _selectLocale(deviceLocale);
			if (typedLocale != null) {
				return typedLocale;
			}
		}
		return _baseLocale;
	}

	/// Returns the enum type of the raw locale.
	/// Fallbacks to base locale.
	static AppLocale parse(String rawLocale) {
		return _selectLocale(rawLocale) ?? _baseLocale;
	}
}

// context enums

enum GenderContext {
	male,
	female,
}

// interfaces generated as mixins

mixin PageData {
	String get title;
	String? get content => null;
}

mixin EndData {
	List<String> get stringPages;
	List<Map<String, String>> get pages;
}

// translation instances

late _TranslationsEn _translationsEn = _TranslationsEn.build();
late _TranslationsDe _translationsDe = _TranslationsDe.build();

// extensions for AppLocale

extension AppLocaleExtensions on AppLocale {

	/// Gets the translation instance managed by this library.
	/// [TranslationProvider] is using this instance.
	/// The plural resolvers are set via [LocaleSettings].
	_TranslationsEn get translations {
		switch (this) {
			case AppLocale.en: return _translationsEn;
			case AppLocale.de: return _translationsDe;
		}
	}

	/// Gets a new translation instance.
	/// [LocaleSettings] has no effect here.
	/// Suitable for dependency injection and unit tests.
	///
	/// Usage:
	/// final t = AppLocale.en.build(); // build
	/// String a = t.my.path; // access
	_TranslationsEn build({PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) {
		switch (this) {
			case AppLocale.en: return _TranslationsEn.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
			case AppLocale.de: return _TranslationsDe.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
		}
	}

	String get languageTag {
		switch (this) {
			case AppLocale.en: return 'en';
			case AppLocale.de: return 'de';
		}
	}

	Locale get flutterLocale {
		switch (this) {
			case AppLocale.en: return const Locale.fromSubtags(languageCode: 'en');
			case AppLocale.de: return const Locale.fromSubtags(languageCode: 'de');
		}
	}
}

extension StringAppLocaleExtensions on String {
	AppLocale? toAppLocale() {
		switch (this) {
			case 'en': return AppLocale.en;
			case 'de': return AppLocale.de;
			default: return null;
		}
	}
}

// wrappers

GlobalKey<_TranslationProviderState> _translationProviderKey = GlobalKey<_TranslationProviderState>();

class TranslationProvider extends StatefulWidget {
	TranslationProvider({required this.child}) : super(key: _translationProviderKey);

	final Widget child;

	@override
	_TranslationProviderState createState() => _TranslationProviderState();

	static _InheritedLocaleData of(BuildContext context) {
		final inheritedWidget = context.dependOnInheritedWidgetOfExactType<_InheritedLocaleData>();
		if (inheritedWidget == null) {
			throw 'Please wrap your app with "TranslationProvider".';
		}
		return inheritedWidget;
	}
}

class _TranslationProviderState extends State<TranslationProvider> {
	AppLocale locale = _currLocale;

	void setLocale(AppLocale newLocale) {
		setState(() {
			locale = newLocale;
		});
	}

	@override
	Widget build(BuildContext context) {
		return _InheritedLocaleData(
			locale: locale,
			child: widget.child,
		);
	}
}

class _InheritedLocaleData extends InheritedWidget {
	final AppLocale locale;
	Locale get flutterLocale => locale.flutterLocale; // shortcut
	final _TranslationsEn translations; // store translations to avoid switch call

	_InheritedLocaleData({required this.locale, required Widget child})
		: translations = locale.translations, super(child: child);

	@override
	bool updateShouldNotify(_InheritedLocaleData oldWidget) {
		return oldWidget.locale != locale;
	}
}

// pluralization resolvers

typedef PluralResolver = String Function(num n, {String? zero, String? one, String? two, String? few, String? many, String? other});

// prepared by fast_i18n

String _pluralCardinalEn(num n, {String? zero, String? one, String? two, String? few, String? many, String? other}) {
	if (n == 0) {
		return zero ?? other!;
	} else if (n == 1) {
		return one ?? other!;
	}
	return other!;
}

String _pluralCardinalDe(num n, {String? zero, String? one, String? two, String? few, String? many, String? other}) {
	if (n == 0) {
		return zero ?? other!;
	} else if (n == 1) {
		return one ?? other!;
	}
	return other!;
}

// helpers

final _localeRegex = RegExp(r'^([a-z]{2,8})?([_-]([A-Za-z]{4}))?([_-]?([A-Z]{2}|[0-9]{3}))?$');
AppLocale? _selectLocale(String localeRaw) {
	final match = _localeRegex.firstMatch(localeRaw);
	AppLocale? selected;
	if (match != null) {
		final language = match.group(1);
		final country = match.group(5);

		// match exactly
		selected = AppLocale.values
			.cast<AppLocale?>()
			.firstWhere((supported) => supported?.languageTag == localeRaw.replaceAll('_', '-'), orElse: () => null);

		if (selected == null && language != null) {
			// match language
			selected = AppLocale.values
				.cast<AppLocale?>()
				.firstWhere((supported) => supported?.languageTag.startsWith(language) == true, orElse: () => null);
		}

		if (selected == null && country != null) {
			// match country
			selected = AppLocale.values
				.cast<AppLocale?>()
				.firstWhere((supported) => supported?.languageTag.contains(country) == true, orElse: () => null);
		}
	}
	return selected;
}

// translations

// Path: <root>
class _TranslationsEn {

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_TranslationsEn.build({PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: _cardinalResolver = cardinalResolver,
		  _ordinalResolver = ordinalResolver;

	/// Access flat map
	dynamic operator[](String key) => _flatMap[key];

	// Internal flat map initialized lazily
	late final Map<String, dynamic> _flatMap = _buildFlatMap();

	// ignore: unused_field
	final PluralResolver? _cardinalResolver;
	// ignore: unused_field
	final PluralResolver? _ordinalResolver;

	// ignore: unused_field
	late final _TranslationsEn _root = this;

	// Translations
	late final _TranslationsOnboardingEn onboarding = _TranslationsOnboardingEn._(_root);
	late final _TranslationsGroupEn group = _TranslationsGroupEn._(_root);
	late final _TranslationsEndEn end = _TranslationsEndEn._(_root);
}

// Path: onboarding
class _TranslationsOnboardingEn {
	_TranslationsOnboardingEn._(this._root);

	// ignore: unused_field
	final _TranslationsEn _root;

	// Translations
	String welcome({required Object fullName}) => 'Welcome $fullName';

	/// Bye text
	String bye({required Object firstName}) => 'Bye $firstName';

	List<PageData> get pages => [
		_TranslationsOnboarding0i0En._(_root),
		_TranslationsOnboarding0i1En._(_root),
	];
	String greet({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
		switch (context) {
			case GenderContext.male: return 'Hello Mr $lastName and ${_root.onboarding.welcome(fullName: fullName)}';
			case GenderContext.female: return 'Hello Ms $lastName and ${_root.onboarding.bye(firstName: firstName)}';
		}
	}
	String greet2({required GenderContext gender}) {
		switch (gender) {
			case GenderContext.male: return 'Hello Mr';
			case GenderContext.female: return 'Hello Ms';
		}
	}
	String greetCombination({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
	String welcomeLinkedPlural({required num count, required Object fullName, required Object firstName}) => 'Hello ${_root.group.users(count: count, fullName: fullName, firstName: firstName)}';
	String welcomeLinkedContext({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hello ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
	String welcomeFullLink({required num count, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimate ${_root.onboarding.welcomeLinkedPlural(count: count, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
}

// Path: group
class _TranslationsGroupEn {
	_TranslationsGroupEn._(this._root);

	// ignore: unused_field
	final _TranslationsEn _root;

	// Translations
	String users({required num count, required Object fullName, required Object firstName}) => (_root._cardinalResolver ?? _pluralCardinalEn)(count,
		zero: 'No Users and ${_root.onboarding.welcome(fullName: fullName)}',
		one: 'One User',
		other: '$count Users and ${_root.onboarding.bye(firstName: firstName)}',
	);
}

// Path: end
class _TranslationsEndEn with EndData {
	_TranslationsEndEn._(this._root);

	// ignore: unused_field
	final _TranslationsEn _root;

	// Translations
	@override List<String> get stringPages => [
		'1st Page',
		'2nd Page',
	];
	@override List<Map<String, String>> get pages => [
		{
			'unknown': 'Unknown Error',
		},
		{
			'with space': 'An Error',
			'with second space': 'An 2nd Error',
		},
	];
}

// Path: onboarding.pages.0
class _TranslationsOnboarding0i0En with PageData {
	_TranslationsOnboarding0i0En._(this._root);

	// ignore: unused_field
	final _TranslationsEn _root;

	// Translations
	@override String get title => 'First Page';
	@override String get content => 'First Page Content';
}

// Path: onboarding.pages.1
class _TranslationsOnboarding0i1En with PageData {
	_TranslationsOnboarding0i1En._(this._root);

	// ignore: unused_field
	final _TranslationsEn _root;

	// Translations
	@override String get title => 'Second Page';
}

// Path: <root>
class _TranslationsDe implements _TranslationsEn {

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_TranslationsDe.build({PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: _cardinalResolver = cardinalResolver,
		  _ordinalResolver = ordinalResolver;

	/// Access flat map
	@override dynamic operator[](String key) => _flatMap[key];

	// Internal flat map initialized lazily
	late final Map<String, dynamic> _flatMap = _buildFlatMap();

	// ignore: unused_field
	final PluralResolver? _cardinalResolver;
	// ignore: unused_field
	final PluralResolver? _ordinalResolver;

	// ignore: unused_field
	@override late final _TranslationsDe _root = this;

	// Translations
	@override late final _TranslationsOnboardingDe onboarding = _TranslationsOnboardingDe._(_root);
	@override late final _TranslationsGroupDe group = _TranslationsGroupDe._(_root);
	@override late final _TranslationsEndDe end = _TranslationsEndDe._(_root);
}

// Path: onboarding
class _TranslationsOnboardingDe implements _TranslationsOnboardingEn {
	_TranslationsOnboardingDe._(this._root);

	// ignore: unused_field
	@override final _TranslationsDe _root;

	// Translations
	@override String welcome({required Object fullName}) => 'Willkommen $fullName';

	/// Bye text
	@override String bye({required Object firstName}) => 'Tschüss $firstName';

	@override List<PageData> get pages => [
		_TranslationsOnboarding0i0De._(_root),
		_TranslationsOnboarding0i1De._(_root),
	];
	@override String greet({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
		switch (context) {
			case GenderContext.male: return 'Hallo Herr $lastName und ${_root.onboarding.welcome(fullName: fullName)}';
			case GenderContext.female: return 'Hallo Frau $lastName und ${_root.onboarding.bye(firstName: firstName)}';
		}
	}
	@override String greet2({required GenderContext gender}) {
		switch (gender) {
			case GenderContext.male: return 'Hallo Herr';
			case GenderContext.female: return 'Hallo Frau';
		}
	}
	@override String greetCombination({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
	@override String welcomeLinkedPlural({required num count, required Object fullName, required Object firstName}) => 'Hallo ${_root.group.users(count: count, fullName: fullName, firstName: firstName)}';
	@override String welcomeLinkedContext({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hallo ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
	@override String welcomeFullLink({required num count, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimative ${_root.onboarding.welcomeLinkedPlural(count: count, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
}

// Path: group
class _TranslationsGroupDe implements _TranslationsGroupEn {
	_TranslationsGroupDe._(this._root);

	// ignore: unused_field
	@override final _TranslationsDe _root;

	// Translations
	@override String users({required num count, required Object fullName, required Object firstName}) => (_root._cardinalResolver ?? _pluralCardinalDe)(count,
		zero: 'Keine Nutzer und ${_root.onboarding.welcome(fullName: fullName)}',
		one: 'Ein Nutzer',
		other: '$count Nutzer und ${_root.onboarding.bye(firstName: firstName)}',
	);
}

// Path: end
class _TranslationsEndDe with EndData implements _TranslationsEndEn {
	_TranslationsEndDe._(this._root);

	// ignore: unused_field
	@override final _TranslationsDe _root;

	// Translations
	@override List<String> get stringPages => [
		'1. Seite',
		'2. Seite',
	];
	@override List<Map<String, String>> get pages => [
		{
			'unknown': 'Unbekannter Fehler',
		},
		{
			'with space': 'Ein Fehler',
			'with second space': 'Ein 2. Fehler',
		},
	];
}

// Path: onboarding.pages.0
class _TranslationsOnboarding0i0De with PageData implements _TranslationsOnboarding0i0En {
	_TranslationsOnboarding0i0De._(this._root);

	// ignore: unused_field
	@override final _TranslationsDe _root;

	// Translations
	@override String get title => 'Erste Seite';
	@override String get content => 'Erster Seiteninhalt';
}

// Path: onboarding.pages.1
class _TranslationsOnboarding0i1De with PageData implements _TranslationsOnboarding0i1En {
	_TranslationsOnboarding0i1De._(this._root);

	// ignore: unused_field
	@override final _TranslationsDe _root;

	// Translations
	@override String get title => 'Zweite Seite';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on _TranslationsEn {
	Map<String, dynamic> _buildFlatMap() {
		return <String, dynamic>{
			'onboarding.welcome': ({required Object fullName}) => 'Welcome $fullName',
			'onboarding.bye': ({required Object firstName}) => 'Bye $firstName',
			'onboarding.pages.0.title': 'First Page',
			'onboarding.pages.0.content': 'First Page Content',
			'onboarding.pages.1.title': 'Second Page',
			'onboarding.greet': ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male: return 'Hello Mr $lastName and ${_root.onboarding.welcome(fullName: fullName)}';
					case GenderContext.female: return 'Hello Ms $lastName and ${_root.onboarding.bye(firstName: firstName)}';
				}
			},
			'onboarding.greet2': ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male: return 'Hello Mr';
					case GenderContext.female: return 'Hello Ms';
				}
			},
			'onboarding.greetCombination': ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}',
			'onboarding.welcomeLinkedPlural': ({required num count, required Object fullName, required Object firstName}) => 'Hello ${_root.group.users(count: count, fullName: fullName, firstName: firstName)}',
			'onboarding.welcomeLinkedContext': ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hello ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}',
			'onboarding.welcomeFullLink': ({required num count, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimate ${_root.onboarding.welcomeLinkedPlural(count: count, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}',
			'group.users': ({required num count, required Object fullName, required Object firstName}) => (_root._cardinalResolver ?? _pluralCardinalEn)(count,
				zero: 'No Users and ${_root.onboarding.welcome(fullName: fullName)}',
				one: 'One User',
				other: '$count Users and ${_root.onboarding.bye(firstName: firstName)}',
			),
			'end.stringPages.0': '1st Page',
			'end.stringPages.1': '2nd Page',
			'end.pages.0.unknown': 'Unknown Error',
			'end.pages.1.with space': 'An Error',
			'end.pages.1.with second space': 'An 2nd Error',
		};
	}
}

extension on _TranslationsDe {
	Map<String, dynamic> _buildFlatMap() {
		return <String, dynamic>{
			'onboarding.welcome': ({required Object fullName}) => 'Willkommen $fullName',
			'onboarding.bye': ({required Object firstName}) => 'Tschüss $firstName',
			'onboarding.pages.0.title': 'Erste Seite',
			'onboarding.pages.0.content': 'Erster Seiteninhalt',
			'onboarding.pages.1.title': 'Zweite Seite',
			'onboarding.greet': ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male: return 'Hallo Herr $lastName und ${_root.onboarding.welcome(fullName: fullName)}';
					case GenderContext.female: return 'Hallo Frau $lastName und ${_root.onboarding.bye(firstName: firstName)}';
				}
			},
			'onboarding.greet2': ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male: return 'Hallo Herr';
					case GenderContext.female: return 'Hallo Frau';
				}
			},
			'onboarding.greetCombination': ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}',
			'onboarding.welcomeLinkedPlural': ({required num count, required Object fullName, required Object firstName}) => 'Hallo ${_root.group.users(count: count, fullName: fullName, firstName: firstName)}',
			'onboarding.welcomeLinkedContext': ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hallo ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}',
			'onboarding.welcomeFullLink': ({required num count, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimative ${_root.onboarding.welcomeLinkedPlural(count: count, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}',
			'group.users': ({required num count, required Object fullName, required Object firstName}) => (_root._cardinalResolver ?? _pluralCardinalDe)(count,
				zero: 'Keine Nutzer und ${_root.onboarding.welcome(fullName: fullName)}',
				one: 'Ein Nutzer',
				other: '$count Nutzer und ${_root.onboarding.bye(firstName: firstName)}',
			),
			'end.stringPages.0': '1. Seite',
			'end.stringPages.1': '2. Seite',
			'end.pages.0.unknown': 'Unbekannter Fehler',
			'end.pages.1.with space': 'Ein Fehler',
			'end.pages.1.with second space': 'Ein 2. Fehler',
		};
	}
}
